// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stock.proto

package stockpb

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type StockRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StockRequest) Reset()         { *m = StockRequest{} }
func (m *StockRequest) String() string { return proto.CompactTextString(m) }
func (*StockRequest) ProtoMessage()    {}
func (*StockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c87a7814fbd674bd, []int{0}
}
func (m *StockRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StockRequest.Unmarshal(m, b)
}
func (m *StockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StockRequest.Marshal(b, m, deterministic)
}
func (m *StockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StockRequest.Merge(m, src)
}
func (m *StockRequest) XXX_Size() int {
	return xxx_messageInfo_StockRequest.Size(m)
}
func (m *StockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StockRequest proto.InternalMessageInfo

type StockResponse struct {
	Price                int64    `protobuf:"varint,1,opt,name=price,proto3" json:"price,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StockResponse) Reset()         { *m = StockResponse{} }
func (m *StockResponse) String() string { return proto.CompactTextString(m) }
func (*StockResponse) ProtoMessage()    {}
func (*StockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c87a7814fbd674bd, []int{1}
}
func (m *StockResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StockResponse.Unmarshal(m, b)
}
func (m *StockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StockResponse.Marshal(b, m, deterministic)
}
func (m *StockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StockResponse.Merge(m, src)
}
func (m *StockResponse) XXX_Size() int {
	return xxx_messageInfo_StockResponse.Size(m)
}
func (m *StockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StockResponse proto.InternalMessageInfo

func (m *StockResponse) GetPrice() int64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func init() {
	proto.RegisterType((*StockRequest)(nil), "stock.StockRequest")
	proto.RegisterType((*StockResponse)(nil), "stock.StockResponse")
}

func init() { proto.RegisterFile("stock.proto", fileDescriptor_c87a7814fbd674bd) }

var fileDescriptor_c87a7814fbd674bd = []byte{
	// 132 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2e, 0x2e, 0xc9, 0x4f,
	0xce, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x73, 0x94, 0xf8, 0xb8, 0x78, 0x82,
	0x41, 0x8c, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x25, 0x55, 0x2e, 0x5e, 0x28, 0xbf, 0xb8,
	0x20, 0x3f, 0xaf, 0x38, 0x55, 0x48, 0x84, 0x8b, 0xb5, 0xa0, 0x28, 0x33, 0x39, 0x55, 0x82, 0x51,
	0x81, 0x51, 0x83, 0x39, 0x08, 0xc2, 0x31, 0x72, 0xe3, 0x62, 0x05, 0x2b, 0x13, 0xb2, 0x85, 0xea,
	0x0f, 0x29, 0x4a, 0x4c, 0xce, 0x4e, 0x2d, 0x12, 0x12, 0xd6, 0x83, 0x58, 0x82, 0x6c, 0xa8, 0x94,
	0x08, 0xaa, 0x20, 0xc4, 0x64, 0x25, 0x06, 0x03, 0x46, 0x27, 0xce, 0x28, 0x76, 0xb0, 0x54, 0x41,
	0x52, 0x12, 0x1b, 0xd8, 0x5d, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa9, 0x41, 0xe2, 0x59,
	0xa6, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StockClient is the client API for Stock service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StockClient interface {
	StockTracker(ctx context.Context, in *StockRequest, opts ...grpc.CallOption) (Stock_StockTrackerClient, error)
}

type stockClient struct {
	cc *grpc.ClientConn
}

func NewStockClient(cc *grpc.ClientConn) StockClient {
	return &stockClient{cc}
}

func (c *stockClient) StockTracker(ctx context.Context, in *StockRequest, opts ...grpc.CallOption) (Stock_StockTrackerClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Stock_serviceDesc.Streams[0], "/stock.Stock/StockTracker", opts...)
	if err != nil {
		return nil, err
	}
	x := &stockStockTrackerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Stock_StockTrackerClient interface {
	Recv() (*StockResponse, error)
	grpc.ClientStream
}

type stockStockTrackerClient struct {
	grpc.ClientStream
}

func (x *stockStockTrackerClient) Recv() (*StockResponse, error) {
	m := new(StockResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StockServer is the server API for Stock service.
type StockServer interface {
	StockTracker(*StockRequest, Stock_StockTrackerServer) error
}

// UnimplementedStockServer can be embedded to have forward compatible implementations.
type UnimplementedStockServer struct {
}

func (*UnimplementedStockServer) StockTracker(req *StockRequest, srv Stock_StockTrackerServer) error {
	return status.Errorf(codes.Unimplemented, "method StockTracker not implemented")
}

func RegisterStockServer(s *grpc.Server, srv StockServer) {
	s.RegisterService(&_Stock_serviceDesc, srv)
}

func _Stock_StockTracker_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StockRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StockServer).StockTracker(m, &stockStockTrackerServer{stream})
}

type Stock_StockTrackerServer interface {
	Send(*StockResponse) error
	grpc.ServerStream
}

type stockStockTrackerServer struct {
	grpc.ServerStream
}

func (x *stockStockTrackerServer) Send(m *StockResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Stock_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stock.Stock",
	HandlerType: (*StockServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StockTracker",
			Handler:       _Stock_StockTracker_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "stock.proto",
}
